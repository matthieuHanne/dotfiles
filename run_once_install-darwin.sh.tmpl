{{- if eq .chezmoi.os "darwin" }}
#!/usr/bin/env bash
set -e
XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

step() {
  local msg="$1"
  local timestamp
  timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  local color='\033[1;34m' # Bold Blue
  local reset='\033[0m'
  echo
  echo -e "${color}🔹 [${timestamp}] ${msg}${reset}"
  printf '%*s\n' "${COLUMNS:-80}" '' | tr ' ' '-'
}

echo "🚀 Starting full macOS setup..."

# ----------------------------------------
# 🛠 Xcode Command Line Tools
# ----------------------------------------
step "Checking for Xcode Command Line Tools"

if ! xcode-select -p >/dev/null 2>&1; then
  echo "📦 Installing Xcode Command Line Tools..."
  xcode-select --install
  until xcode-select -p >/dev/null 2>&1; do
    sleep 5
  done
  echo "✅ Xcode tools installed."
else
  echo "✅ Xcode tools already installed."
fi

# ----------------------------------------
# 🍺 Homebrew
# ----------------------------------------
step "Checking for Homebrew"

if ! command -v brew >/dev/null 2>&1; then
  echo "🍺 Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  eval "$(/opt/homebrew/bin/brew shellenv)"
  echo "✅ Homebrew installed."
else
  echo "✅ Homebrew already installed."
fi

# ----------------------------------------
# 📦 Install Homebrew Packages
# ----------------------------------------
step "Installing Homebrew packages"

brew bundle --file=- <<EOF
tap "homebrew/cask"
tap "homebrew/core"

# CLI tools
brew "curl"
brew "ripgrep"
brew "fd"
brew "htop"
brew "git"
brew "go"
brew "node"
brew "chezmoi"
brew "tmux"
brew "neovim"
brew "lazygit"
brew "figlet"

# GUI apps (cask)
cask "ghostty"
EOF

if [ $? -eq 0 ]; then
  echo "✅ All Homebrew packages installed successfully."
else
  echo "❌ Brew package installation failed."
  exit 1
fi

# ----------------------------------------
# 🐚 Zsh Plugins
# ----------------------------------------
step "Installing zsh plugins"

ZSH_PLUGIN_DIR="$XDG_DATA_HOME/zsh/plugins"
mkdir -p "$ZSH_PLUGIN_DIR"

install_zsh_plugin() {
  local name="$1"
  local repo="$2"
  local target="$ZSH_PLUGIN_DIR/$name"

  if [ ! -d "$target" ]; then
    echo "✨ Installing $name..."
    git clone --depth=1 "$repo" "$target"
  else
    echo "✅ $name already installed."
  fi
}

install_zsh_plugin "zsh-autosuggestions" "https://github.com/zsh-users/zsh-autosuggestions"
install_zsh_plugin "zsh-syntax-highlighting" "https://github.com/zsh-users/zsh-syntax-highlighting.git"
install_zsh_plugin "zsh-z" "https://github.com/agkozak/zsh-z.git"

# ----------------------------------------
# 🐚 Tmux Plugins (TPM + Resurrect)
# ----------------------------------------
step "Installing tmux plugins"

TMUX_PLUGIN_DIR="$XDG_DATA_HOME/tmux/plugins"
TPM_PATH="$TMUX_PLUGIN_DIR/tpm"

if [ ! -d "$TPM_PATH" ]; then
  echo "🌀 Installing tmux-tpm..."
  git clone --depth=1 https://github.com/tmux-plugins/tpm "$TPM_PATH"
  echo "✅ tmux-tpm installed."
else
  echo "✅ tmux-tpm already installed."
fi

# ----------------------------------------
# 🐚 Clone obsidian notes
# ----------------------------------------
if [ ! -d "$HOME/notes" ]; then
  echo "🌀 Cloning obsidian notes..."
  git clone https://github.com/matthieuHanne/notes.git "$HOME/notes"
  echo "✅ obsidian notes cloned."
else
  echo "✅ obsidian notes already cloned."
fi

# ----------------------------------------
# Remapping Caps Lock to Control
# ----------------------------------------
# Run the remap immediately
#hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x7000000E0}]}'

echo "Remapping Caps Lock to Control..."

hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x7000000E0}]}'

mkdir -p ~/Library/LaunchAgents

cat <<EOF >~/Library/LaunchAgents/com.user.keyboardremap.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
 "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">

  <dict>
    <key>Label</key>
    <string>com.user.keyboardremap</string>
    <key>ProgramArguments</key>
    <array>
      <string>/usr/bin/hidutil</string>
      <string>property</string>
      <string>--set</string>
      <string>{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x7000000E0}]}</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
  </dict>
</plist>
EOF

chmod 644 ~/Library/LaunchAgents/com.user.keyboardremap.plist
launchctl load ~/Library/LaunchAgents/com.user.keyboardremap.plist

echo "✅ Caps Lock remapped to Control (immediate). This setting will persist after reboot/login."
echo "💡 You might need to logout or reboot for full effect."
