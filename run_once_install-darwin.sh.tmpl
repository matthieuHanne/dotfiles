{{- if eq .chezmoi.os "darwin" }}
#!/usr/bin/env bash

# Exit on any error, undefined variable, or pipe failure
set -euo pipefail

# XDG Base Directory specification
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"

# Logging functions
step() {
  local msg="$1"
  local timestamp
  timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  local color='\033[1;34m' # Bold Blue
  local reset='\033[0m'
  echo
  echo -e "${color}üîπ [${timestamp}] ${msg}${reset}"
  printf '%*s\n' "${COLUMNS:-80}" '' | tr ' ' '-'
}

success() {
  local msg="$1"
  echo -e "\033[1;32m‚úÖ ${msg}\033[0m"
}

error() {
  local msg="$1"
  echo -e "\033[1;31m‚ùå ${msg}\033[0m" >&2
}

warning() {
  local msg="$1"
  echo -e "\033[1;33m‚ö†Ô∏è  ${msg}\033[0m"
}

# Check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Create XDG directories
create_xdg_directories() {
  step "Creating XDG Base Directories"
  local dirs=(
    "$XDG_CONFIG_HOME"
    "$XDG_DATA_HOME"
    "$XDG_CACHE_HOME"
    "$XDG_DATA_HOME/npm"
    "$XDG_DATA_HOME/pnpm"
    "$XDG_DATA_HOME/go"
    "$XDG_DATA_HOME/tmux/plugins"
    "$XDG_DATA_HOME/oh-my-zsh"
    "$XDG_CACHE_HOME/zsh"
    "$XDG_CACHE_HOME/tmux"
    "$XDG_CACHE_HOME/npm"
    "$XDG_CACHE_HOME/pnpm"
    "$XDG_CACHE_HOME/go/mod"
  )
  
  for dir in "${dirs[@]}"; do
    if [[ ! -d "$dir" ]]; then
      mkdir -p "$dir"
      echo "  üìÅ Created: $dir"
    fi
  done
  success "XDG directories ready"
}

echo "üöÄ Starting comprehensive macOS development environment setup..."

# ----------------------------------------
# üìÅ Setup Directory Structure
# ----------------------------------------
create_xdg_directories

# ----------------------------------------
# üç∫ Install/Update Homebrew
# ----------------------------------------
step "Setting up Homebrew"

if ! command_exists brew; then
  echo "üåÄ Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  
  # Set up Homebrew in current shell (works for both Intel and Apple Silicon)
  if [[ -x "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -x "/usr/local/bin/brew" ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
else
  echo "üîÑ Updating Homebrew..."
  brew update
fi

# ----------------------------------------
# üì¶ Install Homebrew Packages
# ----------------------------------------
step "Installing Homebrew packages"

brew bundle --file=/dev/stdin <<EOF
tap "homebrew/cask"
tap "homebrew/core"
tap "homebrew/cask-fonts"

# Essential CLI tools
brew "curl"
brew "git"
brew "ripgrep"
brew "fd"
brew "tree"
brew "htop"
brew "telnet"
brew "the_silver_searcher"  # ag - code search tool

# Development tools
brew "neovim"
brew "tmux"
brew "lazygit"
brew "chezmoi"
brew "gh"

# Programming languages and runtimes
brew "node"
brew "node@22"
brew "pnpm"
brew "go"

# Cloud & DevOps
brew "awscli"       # Official AWS CLI
brew "sqlc"         # Generate type-safe Go from SQL

# AI & Automation tools
brew "codex"        # OpenAI's coding agent
brew "fabric-ai"    # Framework for augmenting humans using AI

# Fun utilities
brew "figlet"       # ASCII art banner generator

# Fonts
cask "font-fira-code-nerd-font"
cask "font-ubuntu-mono"

# GUI applications
cask "ghostty"
cask "google-chrome"
cask "orbstack"     # Lightweight Docker Desktop alternative
cask "telegram"

# Optional tools (uncomment if needed)
# brew "wget"
# brew "git-delta"   # Syntax-highlighting pager for git
# brew "fzf"         # Fuzzy finder
# brew "jq"          # JSON processor
# brew "yq"          # YAML processor
# brew "btop"        # Resource monitor
# brew "bat"         # Cat clone with syntax highlighting
# brew "eza"         # Modern ls replacement
# brew "zoxide"      # Smarter cd command
# brew "lolcat"      # Rainbow text
# brew "cowsay"      # Talking cow
# brew "fortune"     # Random quotes
# brew "tldr"        # Simplified man pages
# brew "thefuck"     # Correct previous command
# brew "direnv"      # Project-specific environment variables
# brew "atuin"       # Enhanced shell history with sync
# brew "mkcert"      # Local HTTPS certificates
# brew "watchman"    # File watching service
# brew "starship"    # Modern shell prompt
# cask "firefox"
# cask "visual-studio-code"
EOF

if [[ $? -eq 0 ]]; then
  success "All Homebrew packages installed successfully"
else
  error "Homebrew package installation failed"
  exit 1
fi

# ----------------------------------------
# üêö Oh My Zsh Installation
# ----------------------------------------
step "Installing Oh My Zsh to XDG location"

if [[ ! -d "$XDG_DATA_HOME/oh-my-zsh" ]]; then
  echo "üåÄ Installing Oh My Zsh..."
  git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git "$XDG_DATA_HOME/oh-my-zsh"
  success "Oh My Zsh installed to $XDG_DATA_HOME/oh-my-zsh"
else
  echo "üîÑ Updating Oh My Zsh..."
  cd "$XDG_DATA_HOME/oh-my-zsh" && git pull origin master
  success "Oh My Zsh already installed and updated"
fi

# ----------------------------------------
# üêö Zsh Plugins (External)
# ----------------------------------------
step "Installing external Zsh plugins"

ZSH_PLUGIN_DIR="$XDG_DATA_HOME/zsh/plugins"
mkdir -p "$ZSH_PLUGIN_DIR"

install_zsh_plugin() {
  local name="$1"
  local repo="$2"
  local target="$ZSH_PLUGIN_DIR/$name"

  if [[ ! -d "$target" ]]; then
    echo "‚ú® Installing $name..."
    git clone --depth=1 "$repo" "$target"
    success "$name installed"
  else
    echo "üîÑ Updating $name..."
    cd "$target" && {
      git fetch origin
      git reset --hard origin/master 2>/dev/null || git reset --hard origin/main 2>/dev/null || true
    }
    success "$name updated"
  fi
}

# Only install plugins not covered by Oh My Zsh
install_zsh_plugin "zsh-autosuggestions" "https://github.com/zsh-users/zsh-autosuggestions"
install_zsh_plugin "zsh-syntax-highlighting" "https://github.com/zsh-users/zsh-syntax-highlighting.git"

# Note: zsh-z is now handled by Oh My Zsh's 'z' plugin

# ----------------------------------------
# üêö Tmux Plugin Manager
# ----------------------------------------
step "Installing Tmux Plugin Manager"

TMUX_PLUGIN_DIR="$XDG_DATA_HOME/tmux/plugins"
TPM_PATH="$TMUX_PLUGIN_DIR/tpm"

if [[ ! -d "$TPM_PATH" ]]; then
  echo "üåÄ Installing TPM..."
  git clone --depth=1 https://github.com/tmux-plugins/tpm "$TPM_PATH"
  success "TPM installed"
else
  echo "üîÑ Updating TPM..."
  cd "$TPM_PATH" && {
    git fetch origin
    git reset --hard origin/master
  }
  success "TPM updated"
fi

# ----------------------------------------
# üìù Node.js Setup
# ----------------------------------------
step "Setting up Node.js environment"

# Install global packages with pnpm (optional - uncomment packages you need)
if command_exists pnpm; then
  echo "üåÄ Installing essential global Node.js packages..."
  # Uncomment packages you want globally:
  # pnpm add -g \
  #   typescript \
  #   ts-node \
  #   eslint \
  #   prettier \
  #   npm-check-updates \
  #   serve \
  #   http-server \
  #   nodemon \
  #   concurrently
  success "Node.js environment ready"
else
  warning "pnpm not found, skipping Node.js global packages"
fi

# ----------------------------------------
# üêç Python Setup (Optional)
# ----------------------------------------
step "Setting up Python environment"

if command_exists python3; then
  echo "Python $(python3 --version) is available"

  # Optional: Install pipx for isolated Python tool installations
  # Uncomment if you want Python development tools globally:
  # echo "üåÄ Installing pipx..."
  # python3 -m pip install --user --upgrade pip setuptools wheel
  # python3 -m pip install --user --upgrade pipx
  # python3 -m pipx ensurepath
  #
  # if command_exists pipx; then
  #   echo "üåÄ Installing Python tools via pipx..."
  #   pipx install black      # Code formatter
  #   pipx install flake8     # Linter
  #   pipx install mypy       # Type checker
  #   pipx install ruff       # Fast linter
  #   pipx install poetry     # Dependency management
  #   pipx install jupyter    # Interactive notebooks
  # fi

  success "Python environment ready"
else
  warning "Python not found"
fi

# ----------------------------------------
# üîß macOS Preferences
# ----------------------------------------
step "Configuring macOS preferences"

# Show hidden files in Finder
defaults write com.apple.finder AppleShowAllFiles -bool true

# Show file extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Disable creation of .DS_Store files on network drives
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

# Faster key repeat
defaults write NSGlobalDomain KeyRepeat -int 2
defaults write NSGlobalDomain InitialKeyRepeat -int 15

# Show battery percentage
defaults write com.apple.menuextra.battery ShowPercent -string "YES"

success "macOS preferences configured"

# ----------------------------------------
# üìö Clone Personal Notes (if applicable)
# ----------------------------------------
step "Setting up personal workspace"

if [[ ! -d "$HOME/notes" ]]; then
  echo "üåÄ Cloning personal notes..."
  if git clone https://github.com/matthieuHanne/notes.git "$HOME/notes" 2>/dev/null; then
    success "Personal notes cloned"
  else
    warning "Could not clone notes repository (might be private or not exist)"
  fi
else
  success "Personal notes already exist"
fi

# ----------------------------------------
# üîÑ Final Setup Steps
# ----------------------------------------
step "Performing final setup steps"

# Restart affected applications
echo "üîÑ Restarting Finder..."
killall Finder 2>/dev/null || true

# Install tmux plugins if tmux is available
if command_exists tmux && [[ -f "$XDG_CONFIG_HOME/tmux/tmux.conf" ]]; then
  echo "üåÄ Installing tmux plugins..."
  "$TPM_PATH/bin/install_plugins" 2>/dev/null || true
fi

# Set up git if not configured
if ! git config --global user.name >/dev/null 2>&1; then
  warning "Git user not configured. Run: git config --global user.name 'Your Name'"
  warning "And: git config --global user.email 'your.email@example.com'"
fi

success "macOS development environment setup complete!"

echo
echo "üéâ Setup Summary:"
echo "  ‚Ä¢ Homebrew packages installed and updated"
echo "  ‚Ä¢ Oh My Zsh installed with XDG compliance"
echo "  ‚Ä¢ Zsh plugins (autosuggestions, syntax-highlighting) installed"
echo "  ‚Ä¢ Tmux Plugin Manager installed"
echo "  ‚Ä¢ Node.js and pnpm ready (global packages optional)"
echo "  ‚Ä¢ Python environment ready (tools optional)"
echo "  ‚Ä¢ macOS preferences optimized"
echo "  ‚Ä¢ Personal workspace set up"
echo
echo "üìù Next Steps:"
echo "  1. Restart your terminal to load new configurations"
echo "  2. Run 'tmux' and press Ctrl+Space + I to install tmux plugins"
echo "  3. Open Neovim and let Lazy.nvim install plugins automatically"
echo "  4. Customize any remaining settings to your preference"
echo
echo "üîó Useful Commands:"
echo "  ‚Ä¢ chezmoi status      - Check dotfiles status"
echo "  ‚Ä¢ chezmoi diff        - See configuration changes"
echo "  ‚Ä¢ chezmoi apply       - Apply any pending changes"
echo "  ‚Ä¢ brew bundle dump    - Generate current Brewfile"
echo
warning "Please restart your terminal session for all changes to take effect!"

{{- end }}
